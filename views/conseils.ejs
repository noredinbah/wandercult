<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta http-equiv="Cache-Control" content="no-cache, no-store, must-revalidate">
    <meta http-equiv="Pragma" content="no-cache">
    <meta http-equiv="Expires" content="0">
    <link rel="icon" type="image/png" href="assets/images/logo.png">
    <link rel="stylesheet" href="conseil.css" />
    <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined:opsz,wght,FILL,GRAD@48,400,0,0" />
    <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Material+Symbols+Rounded:opsz,wght,FILL,GRAD@48,400,1,0" />
    
    <script src="card.js" defer></script>
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    <title>advise</title>
    <script defer>
      document.addEventListener("DOMContentLoaded", function() {
          const darkModeToggle = document.getElementById('darkModeToggle');
          const body = document.body;

      
          // Check if dark mode is already enabled
          if (localStorage.getItem('darkMode') === 'enabled') {
              body.classList.add('dark-mode');
          }
      
          darkModeToggle.addEventListener('click', function() {
              body.classList.toggle('dark-mode');
              if (body.classList.contains('dark-mode')) {
                  localStorage.setItem('darkMode', 'enabled');
              } else {
                  localStorage.setItem('darkMode', 'disabled');
              }
          });
      });
      </script>
  </head>
  <body>
    <div class="wrapper">
      <header>
        <img src="assets/images/logo.png" alt="logo" class="logo" />
        <img src="assets/images/logoText.png" alt="logoText" class="logotext" />
        <img
  src="assets/images/search.png"
  alt="search"
  class="icon icon-searcher"
  id="myButton"
  onclick="performSear()"
/>
<input type="text" id="searchInput" placeholder="Search places" class="search" />
<% if (profileImagePath) { %>
  <img src="<%= profileImagePath %>" id="profile-button" alt="avatar" class="avatar" onclick="window.location.href='/profile';" >
  <% } else { %>
    <img src="assets/images/firefly.jpg" id="profile-button" alt="avatar" class="avatar" onclick="window.location.href='/profile';" />
    <% }%>
      </header>
      <container>
        <div class="left">
          <ul>
            <span id="num">
              <img
                src="assets/images/home.png"
                alt="home"
                class="icon home-icon"
              />
              <li><a href="/home">Home</a></li>
            </span>
            <span id="num" class="second">
              <img
                src="assets/images/old-phone_11552945.png"
                alt="discover"
                class="icon discover-icon"
              />
              <li><a href="/help">Numbers & advise</a></li>
            </span>
            <span id="num">
              <img
                src="assets/images/error-sign_76789.png"
                alt="friends"
                class="icon friends-icon"
              />
              <li><a href="/report">Report</a></li>
            </span>
            <span id="num">
              <img
                src="assets/images/saved.png"
                alt="saved"
                class="icon saved-icon"
              />
              <li><a href="/saved">Saved</a></li>
            </span>
          </ul>
          <div class="line1"></div>
          <ul class="ul2">
            <span id="num">
              <img
                src="assets/images/settings.png"
                alt="settings"
                class="icon settings-icon"
              />
              <li><a href="/settings">settings</a></li>
            </span>
            <span id="num">
              <img
                src="assets/images/logout.png"
                alt="logout"
                class="icon logout-icon"
              />
              <li><a href="/logout">Logout</a></li>
            </span >
          </ul>
          <div class="info">
            <a href="usage_condition.html" target="_blank"
              >Terms and services</a
            >
            <a href="securityTerms.html" target="_blank"> Privacy Policy</a>
          </div>
        </div>
        <div class="right">
          <div class="conseil">
            <h1>Tips to Avoid Scams in Morocco</h1>
            <ol>
                <li><strong>Be cautious of offers that seem too good to be true</strong>: If an offer seems too good to be true, it often is. Be skeptical of offers that promise quick gains or extraordinary benefits.</li>
                <li><strong>Check prices</strong>: Do some research to know the usual prices of the goods or services you want to buy. This will help you spot exaggeratedly high or low prices more easily.</li>
                <li><strong>Bargain wisely</strong>: Bargaining is common in Morocco, but that doesn't mean all prices are negotiable. Know when it's appropriate to bargain and when it's better to accept the displayed price.</li>
                <li><strong>Avoid cash transactions when possible</strong>: Prefer credit card payments or bank transfers for significant transactions. This provides a clearer trail and better protection in case of a dispute.</li>
                <li><strong>Be vigilant in tourist areas</strong>: Scams can be more common in places heavily frequented by tourists. Pay extra attention to prices and offers in these locations.</li>
                <li><strong>Research businesses and sellers</strong>: Before dealing with a business or seller, look up online reviews and ask for recommendations from trusted individuals.</li>
                <li><strong>Beware of fake tourist guides</strong>: Some unscrupulous individuals may pose as official tourist guides and lead you to shops where they earn commissions on your purchases. Prefer using reputable travel agencies or ask for reliable recommendations.</li>
                <li><strong>Be aware of common scams</strong>: Educate yourself about frequent scams in Morocco, such as counterfeit banknotes, aggressive sellers, or unreliable tour operators.</li>
            </ol>
            <p>In general, trust your instincts. If something feels suspicious, it's better not to proceed with the transaction.</p>
        
            <h1>Useful Phone Numbers in Morocco</h1>
        
            <ol>
                <li><strong>Police:</strong> In case of an emergency or if you need police assistance, dial <span id="num" style="color:red;">19</span>.</li>
                <li><strong>Firefighters:</strong> To report a fire or request the intervention of firefighters, dial <span id="num" style="color:red;">15</span>.</li>
                <li><strong>SAMU:</strong> For medical emergencies, including situations requiring an ambulance, dial <span id="num"style="color:red;">150</span>.</li>
                <li><strong>Roadside Assistance:</strong> In case of a car breakdown or accident on the road, you can contact the National Highway Emergency Call Center by dialing <spa id="num" style="color:red;">5050</span>.</li>
                <li><strong>Tourist Assistance:</strong> For help or tourist information, you can contact the Moroccan National Tourist Office at <span id="num" style="color:red;">+212 5372-02145</span>.</li>
                <li><strong>Consular Assistance:</strong> If you are a foreign national in need of consular assistance, contact your country's embassy or consulate in Morocco. Contact details may vary depending on your nationality.</li>
                <li><strong>Telephone Information Service:</strong> <span id="num" style="color:red;">160</span> is a national general information telephone service.</li>
                <li><strong>Customer Service of Airlines, Hotels, etc.:</strong> If you have problems with a reservation or need assistance, contact the customer service of the airline, hotel, or any other relevant company. Phone numbers may vary depending on the company.</li>
            </ol>
        
            <p>Make sure to verify phone numbers before traveling to Morocco, as they can change and vary by region or company. It is also wise to keep these numbers handy in case of an emergency during your stay.</p>
        </div>
        
      </container>

    <!-- Chatbot Button and Container -->
    <button class="chatbot-toggler">
      <span class="material-symbols-rounded">mode_comment</span>
      <span class="material-symbols-outlined">close</span>
      <div class="info-card">Talk to WandyBot</div>
    </button>
    <div class="chatbot">
      <header>
        <h2>WandyBot</h2>
        <span class="close-btn material-symbols-outlined">close</span>
      </header>
      <ul class="chatbox">
        <li class="chat incoming">
          <span class="material-symbols-outlined">smart_toy</span>
          <p>Hi there <br>How can I help you today?</p>
        </li>
      </ul>
      <div class="chat-input">
        <textarea placeholder="Enter a message..." spellcheck="false" required></textarea>
        <span id="send-btn" class="material-symbols-rounded">send</span>
      </div>
    </div>

  </div>
  <script>
    const chatbotToggle = document.querySelector(".chatbot-toggler");
const infoCard = document.querySelector(".info-card");
const closeBt = document.querySelector(".close-btn");

chatbotToggle.addEventListener("mouseover", function() {
  if (!document.body.classList.contains("show-chatbot")) {
    infoCard.style.display = "block";
  }
});

chatbotToggle.addEventListener("mouseout", function() {
  infoCard.style.display = "none";
});


  </script>
<script>
const chatbotToggler = document.querySelector(".chatbot-toggler");
const closeBtn = document.querySelector(".close-btn");
const chatbox = document.querySelector(".chatbox");
const chatInput = document.querySelector(".chat-input textarea");
const sendChatBtn = document.querySelector(".chat-input span");

let userMessage = null; // Variable to store user's message
const inputInitHeight = chatInput.scrollHeight;

// API configuration
const API_KEY = "AIzaSyBK1OSc9bQsZNtUj5by_79ZsDCULF5jhmQ"; // Your API key here
const API_URL = `https://generativelanguage.googleapis.com/v1/models/gemini-pro:generateContent?key=${API_KEY}`;

const createChatLi = (message, className) => {
  // Create a chat <li> element with passed message and className
  const chatLi = document.createElement("li");
  chatLi.classList.add("chat", `${className}`);
  let chatContent = className === "outgoing" ? `<p></p>` : `<span class="material-symbols-outlined">smart_toy</span><p></p>`;
  chatLi.innerHTML = chatContent;
  chatLi.querySelector("p").textContent = message;
  return chatLi; // return chat <li> element
}

const generateResponse = async (chatElement) => {
  const messageElement = chatElement.querySelector("p");

  // Define the properties and message for the API request
  const requestOptions = {
    method: "POST",
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify({ 
      contents: [{ 
        role: "user", 
        parts: [{ text: userMessage }] 
      }] 
    }),
  }

  // Send POST request to API, get response and set the reponse as paragraph text
  try {
    const response = await fetch(API_URL, requestOptions);
    const data = await response.json();
    if (!response.ok) throw new Error(data.error.message);
    
    // Get the API response text and update the message element
    messageElement.textContent = data.candidates[0].content.parts[0].text.replace(/\*\*(.*?)\*\*/g, '$1');
  } catch (error) {
    // Handle error
    messageElement.classList.add("error");
    messageElement.textContent = error.message;
  } finally {
    chatbox.scrollTo(0, chatbox.scrollHeight);
  }
}

const handleChat = () => {
  userMessage = chatInput.value.trim(); // Get user entered message and remove extra whitespace
  if (!userMessage) return;

  // Clear the input textarea and set its height to default
  chatInput.value = "";
  chatInput.style.height = `${inputInitHeight}px`;

  // Append the user's message to the chatbox
  chatbox.appendChild(createChatLi(userMessage, "outgoing"));
  chatbox.scrollTo(0, chatbox.scrollHeight);

  setTimeout(() => {
    // Display "Thinking..." message while waiting for the response
    const incomingChatLi = createChatLi("Thinking...", "incoming");
    chatbox.appendChild(incomingChatLi);
    chatbox.scrollTo(0, chatbox.scrollHeight);
    generateResponse(incomingChatLi);
  }, 600);
}

chatInput.addEventListener("input", () => {
  // Adjust the height of the input textarea based on its content
  chatInput.style.height = `${inputInitHeight}px`;
  chatInput.style.height = `${chatInput.scrollHeight}px`;
});

chatInput.addEventListener("keydown", (e) => {
  // If Enter key is pressed without Shift key and the window 
  // width is greater than 800px, handle the chat
  if (e.key === "Enter" && !e.shiftKey && window.innerWidth > 800) {
    e.preventDefault();
    handleChat();
  }
});

sendChatBtn.addEventListener("click", handleChat);
closeBtn.addEventListener("click", () => document.body.classList.remove("show-chatbot"));
chatbotToggler.addEventListener("click", () => document.body.classList.toggle("show-chatbot"));


</script>
    </div>
  </body>
  
</html>
